// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCovidLife.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\BlazorCovidLife\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\BlazorCovidLife\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\BlazorCovidLife\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\BlazorCovidLife\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\BlazorCovidLife\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\BlazorCovidLife\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\BlazorCovidLife\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\BlazorCovidLife\_Imports.razor"
using BlazorCovidLife;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\BlazorCovidLife\_Imports.razor"
using BlazorCovidLife.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/DataOfCountry")]
    public partial class DataCountry : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 99 "C:\BlazorCovidLife\Pages\DataCountry.razor"
       
    String data;
    Data.Country country;
    Data.dataMonthZone datazone;
    Data.User user;
    double amountcredyou;

    protected override void OnInitialized()
    {
        user = Data.User.GetInstance;
        if (user.getLogin == true && user.getisload == true)
        {
            if (!user.isManage && user.Somecredts >= 0 && user.Somecredts <= 100)
                user.Somecredts = 0;
            if (!user.isManage && user.Somecredts > 100)
                user.Somecredts = user.Somecredts - 100;
        }

        country = Data.Country.GetInstance;
        for (int i = 0; i < country.zones.Count; i++)
        {
            country.zones[i].HealthsPercent = (double)(country.zones[i].totalhealths) / (double)(country.zones[i].totalpeople);
            country.zones[i].HealthsPercent = Math.Round(country.zones[i].HealthsPercent, 4);
            if (country.zones[i].datamonthzone.Count == 1)
            {
                country.zones[i].getCofficent_infection = 1;
                country.zones[i].getCofficent_infection = Math.Round(country.zones[i].getCofficent_infection, 4);
            }
            else
            {
                int p = country.zones[i].datamonthzone[country.zones[i].datamonthzone.Count - 1].getCountPatients;
                int p2 = country.zones[i].datamonthzone[country.zones[i].datamonthzone.Count - 2].getCountPatients;
                country.zones[i].getCofficent_infection = (double)(p) / p2;
                country.zones[i].getCofficent_infection = Math.Round(country.zones[i].getCofficent_infection, 4);
            }
        }
        updateRedCity();
        amountcredyou = user.Somecredts;
    }

    private void updateRedCity()
    {
        double avg = 0;
        double sum = 0;
        foreach (var zon in country.zones)
        {
            sum = sum + zon.HealthsPercent;
        }
        avg = (double)(sum) / (double)(country.zones.Count);
        for (int i = 0; i < country.zones.Count; i++)
        {
            if (country.zones[i].HealthsPercent >= avg)
                country.zones[i].OpenOrClosed = "Open";
            else
                country.zones[i].OpenOrClosed = "Closed";
        }
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
